Let’s start with basics first. So, what is bot?
A bot is an artificial intelligence software designed to perform a series of tasks on its own and without the help of a human being. Tasks a bot can do can vary from things such as making a reservation at a restaurant, marking a date on the calendar or collecting and displaying information to its users, and informing the user about the weather, etc.
The most frequent model is that of a chatbot. Chatbots are capable of simulating a conversation with a person and therefore are increasingly present in messaging applications. Chatbots are versatile, therefore they’re able to adapt and help solve different business pains.
In short:
A chatbot is a software system, which can interact or “chat” with a human user in natural language (such as English, or whatever other language the chatbot has been built on). Chatbots can help inform a user, or help them with fulfilling a task.
Fun Fact:
There’s annual contest: the Loebner Prize, where rival chatbots have been assessed in terms of ability to fool a judge in a restricted chat session. The format of the competition is based on the Turing test, named after the famous British mathematician and computer pioneer Alan Turing who proposed the test in a 1950 paper entitled Computing Machinery and Intelligence.
So as you can see chatbots are not something new, if you’re interested in learning more about the history of Chatbots you can check-out the piece: Chatbots: The Very First & The Latest.

Can a computer talk like a human? Alex Gendler describes the Turing test and details some of its surprising results.
2. How do Chatbots actually work?
There are two types of chatbots Rule based bots and AI bots. Kumar Shridhar Co-Chief AI Scientist at BotSupply explains us how Ruled based bots work:
Rule-Based Approach: In a rule-based approach, a bot answers questions based on some rules on which it is trained on. The rules defined can be very simple to very complex. The creation of these bots are relatively straightforward using some rule-based approach, but the bot is not efficient in answering questions, whose pattern does not match with the rules on which the bot is trained. — Kumar Shridhar
However, for a chatbot to be able to do more than simply answer questions it has to be connected to an Artificial Intelligence (AI). AI is the technology that allows the bot to learn from the interactions it has with the end users. Behind this learnings there are analytics platforms, and integrations with APIs, among other things, that feed the AI ​​and provide resources so that that the chatbot is able to provide the user with correct answers.

3. Does it take great engineering to develop a Chatbot?
You do not have to be an AI or engineering expert to build a chatbot. The secret is to be clear about what is going to be created and what kind of problems will be solved. Once the chatbots function is clear, the development is not more complicated than that of a simple web app.
Nevertheless, in case your expectations for the chatbot are high, it is convenient to leave it’s development on the hands of experts, such as companies that offer Artificial Intelligence solutions. Even then, the process can be very simple if you make sure to leave the process in the right hands.
Francesco Stasi CEO at BotSupply has written a comprehensible guide about how easy it can be to implement AI in Customer Service Automation. His key highlight:
AI can be very simple! — Francesco Stasi
4. What can Chatbots actually do?
Depending on the purpose with which the chatbot was created, it’s functionality will be determined. Below you can read some of the most come uses for Chatbots:
a) Virtual Assistants:
Businesses use chatbots for a variety of cases, such as customer service. Simply put, an artificial intelligence service can be used to answer simple questions, help users book services, get more information about a specific topic, buy a product, etc. Having a chatbot help expedite this types of tasks, allows for human agents to focus on more relevant problems. At the same time a chatbot allows the company to have a 24/7 service to attend to their customers needs.
b) Idea Generation:
Data is the commodity that powers the digital economy these days. However, it is necessary to have the necessary resources to transform them into something of value. Ideally companies will have cognitive solutions in place that learn automatically from all the data they collect. What makes artificial intelligence systems so powerful is precisely the fact that they can learn. That allows them to adapt when market behaviour changes, as well as continuously improve performance as more data comes in.
c) Automation of manual processes:
Artificial intelligence is rapidly automating routine and mechanical cognitive processes. Leaving more time for innovation. The use of intelligent algorithms, for example, can now automate the process of collecting data from various reports and perform an analysis to determine the profitability of a particular business path.
d) Analysis of unstructured data:
It is estimated that 80% of the digital data is not structured. Organizing and tracking these data has the potential of leading to a better understanding of the users and making predictions based on tendencies.

data = open('/Users/catherineng/Desktop/Python_Projects/huntercodefest/app/templates/chatbots.txt')
raw = data.read()
raw = raw.lower()
sent_tokens = nltk.sent_tokenize(raw)

def Normalize(text):
    remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)
    #word tokenization
    word_token = nltk.word_tokenize(text.lower().translate(remove_punct_dict))
    
    #remove ascii
    new_words = []
    for word in word_token:
        new_word = unicodedata.normalize('NFKD', word).encode('ascii', 'ignore').decode('utf-8', 'ignore')
        new_words.append(new_word)
    
    #Remove tags
    rmv = []
    for w in new_words:
        text=re.sub("&lt;/?.*?&gt;","&lt;&gt;",w)
        rmv.append(text)
        
    #pos tagging and lemmatization
    tag_map = defaultdict(lambda : wn.NOUN)
    tag_map['J'] = wn.ADJ
    tag_map['V'] = wn.VERB
    tag_map['R'] = wn.ADV
    lmtzr = WordNetLemmatizer()
    lemma_list = []
    rmv = [i for i in rmv if i]
    for token, tag in nltk.pos_tag(rmv):
        lemma = lmtzr.lemmatize(token, tag_map[tag[0]])
        lemma_list.append(lemma)
    return lemma_list

welcome_input = ("hello", "hi", "greetings", "sup", "what's up","hey",)
welcome_response = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]
def welcome(user_response):
    for word in user_response.split():
        if word.lower() in welcome_input:
            return random.choice(welcome_response)


def generateResponse(user_response):
    robo_response=''
    sent_tokens.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer=Normalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sent_tokens)
    #vals = cosine_similarity(tfidf[-1], tfidf)
    vals = linear_kernel(tfidf[-1], tfidf)
    idx=vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0) or "tell me about" in user_response:
        print("Checking Wikipedia")
        if user_response:
            robo_response = wikipedia_data(user_response)
            return robo_response
    else:
        robo_response = robo_response+sent_tokens[idx]
        return robo_response
#wikipedia search
def wikipedia_data(input):
    reg_ex = re.search('tell me about (.*)', input)
    try:
        if reg_ex:
            topic = reg_ex.group(1)
            wiki = wk.summary(topic, sentences = 3)
            return wiki
    except Exception as e:
            print("No content has been found")

flag=True
print("My name is Chatterbot and I'm a chatbot. If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response not in ['bye','shutdown','exit', 'quit']):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("Chatterbot : You are welcome..")
        else:
            if(welcome(user_response)!=None):
                print("Chatterbot : "+welcome(user_response))
            else:
                print("Chatterbot : ",end="")
                print(generateResponse(user_response))
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("Chatterbot : Bye!!! ")